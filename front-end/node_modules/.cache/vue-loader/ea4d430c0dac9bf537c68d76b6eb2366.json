{"remainingRequest":"/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/src/views/Admin.vue?vue&type=template&id=54c38a05&scoped=true&","dependencies":[{"path":"/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/src/views/Admin.vue","mtime":1586502195211},{"path":"/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sangwoo/Documents/winter20/cs260/lab4/lab-4-museum-of-ordinary-objects-Shawn45/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}